const samplerFlux = {
    teaCacheMaxSkipSteps: 2,
    seed: 22222,
    teaCacheStart: 5,
    tiledDiffusion: false,
    causalInferencePad: 0,
    separateClipL: true,
    sharpness: 0,
    resolutionDependentShift: true,
    seedMode: 2,
    teaCache: true,
    cfgZeroStar: true,
    steps: 16,
    batchSize: 1,
    clipLText: "special",
    controls: [],
    clipSkip: 2,
    loras: [],
    width: 768,
    maskBlur: 2.5,
    maskBlurOutset: 0,
    cfgZeroInitSteps: 3,
    teaCacheEnd: -3,
    height: 1152,
    tiledDecoding: false,
    batchCount: 1,
    guidanceScale: 3,
    preserveOriginalAfterInpaint: true,
    speedUpWithGuidanceEmbed: true,
    zeroNegativePrompt: true,
    sampler: 10,
    teaCacheThreshold: 0.040000000000000001,
    shift: 2.8339362000000001,
    model: "flux_1_dev_q5p.ckpt",
    strength: 0.90000000000000002,
    hiresFix: false,
};
const samplerXL = {
    cropTop: 0,
    seed: 33333,
    maskBlurOutset: 10,
    steps: 22,
    stochasticSamplingGamma: 0.23999999999999999,
    diffusionTileHeight: 512,
    cfgZeroStar: true,
    targetImageHeight: 768,
    decodingTileWidth: 384,
    guidanceScale: 5,
    hiresFixHeight: 640,
    aestheticScore: 6,
    height: 768,
    causalInferencePad: 0,
    diffusionTileWidth: 512,
    decodingTileHeight: 384,
    controls: [],
    decodingTileOverlap: 128,
    tiledDecoding: true,
    tiledDiffusion: true,
    originalImageWidth: 768,
    negativeAestheticScore: 2.5,
    strength: 0.8,
    diffusionTileOverlap: 64,
    cfgZeroInitSteps: 3,
    hiresFixStrength: 0.59999999999999998,
    hiresFixWidth: 640,
    model: "fooocus_inpaint_sd_xl_v2.6_q6p_q8p.ckpt",
    clipSkip: 2,
    sampler: 9,
    batchSize: 1,
    hiresFix: true,
    shift: 1.3,
    zeroNegativePrompt: false,
    negativeOriginalImageWidth: 512,
    targetImageWidth: 768,
    originalImageHeight: 768,
    negativeOriginalImageHeight: 512,
    loras: [],
    batchCount: 1,
    seedMode: 3,
    cropLeft: 0,
    preserveOriginalAfterInpaint: true,
    sharpness: 3.5,
    width: 768,
    maskBlur: 3,
};
const upscaler = {
    upscaler: "realesrgan_x4plus_f16.ckpt",
    upscalerScaleFactor: 2,
};
const refiner = {
    refinerModel: "xi_v2_f16.ckpt",
    refinerStart: 0.9,
};
const cnet = {
    controls: [
        {
            globalAveragePooling: false,
            weight: 0.75,
            inputOverride: "",
            file: "controlnet_depth_sdxl_v1.0_mid_f16.ckpt",
            noPrompt: false,
            guidanceStart: 0.1,
            targetBlocks: [],
            guidanceEnd: 0.2,
            controlImportance: "prompt",
            downSamplingRate: 1,
        },
    ],
};
const cnet2 = {
    controls: [
        {
            globalAveragePooling: false,
            weight: 0.75,
            inputOverride: "",
            file: "controlnet_depth_sdxl_v1.0_mid_f16.ckpt",
            noPrompt: false,
            guidanceStart: 0.1,
            targetBlocks: [],
            guidanceEnd: 0.2,
            controlImportance: "prompt",
            downSamplingRate: 1,
        },
        {
            globalAveragePooling: false,
            weight: 0.85,
            inputOverride: "depth",
            file: "controlnet_xinsir_union_promax_sdxl_1.0_f16.ckpt",
            noPrompt: false,
            guidanceStart: 0.3,
            targetBlocks: [],
            guidanceEnd: 0.4,
            controlImportance: "control",
            downSamplingRate: 1,
        },
    ],
};
const lora2 = {
    loras: [
        {
            mode: "all",
            file: "hyper_sdxl_8_step_lora_f16.ckpt",
            weight: 0.1,
        },
        {
            mode: "refiner",
            file: "dmd2_sdxl_4_step_lora_f16.ckpt",
            weight: 0.2,
        },
    ],
};
const lora7 = {
    loras: Array.from({ length: 7 }, (_, index) => ({
        ...lora2.loras[index % 2],
        weight: (index + 1) / 10,
    })),
};
const lora12 = {
    loras: Array.from({ length: 12 }, (_, index) => ({
        ...lora2.loras[index % 2],
        weight: (index + 1) / 10,
    })),
};

const configs = {
    samplerFlux,
    samplerXL,
    upscaler,
    refiner,
    cnet,
    cnet2,
    lora2,
    lora7,
    lora12,
};

export default configs;
