# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LoRA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LoRA()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLoRA(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LoRA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LoRA
    def File(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LoRA
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.6

def LoRAStart(builder):
    builder.StartObject(2)

def Start(builder):
    LoRAStart(builder)

def LoRAAddFile(builder, file):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(file), 0)

def AddFile(builder, file):
    LoRAAddFile(builder, file)

def LoRAAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.6)

def AddWeight(builder, weight):
    LoRAAddWeight(builder, weight)

def LoRAEnd(builder):
    return builder.EndObject()

def End(builder):
    return LoRAEnd(builder)


class LoRAT(object):

    # LoRAT
    def __init__(self):
        self.file = None  # type: str
        self.weight = 0.6  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        loRa = LoRA()
        loRa.Init(buf, pos)
        return cls.InitFromObj(loRa)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, loRa):
        x = LoRAT()
        x._UnPack(loRa)
        return x

    # LoRAT
    def _UnPack(self, loRa):
        if loRa is None:
            return
        self.file = loRa.File()
        self.weight = loRa.Weight()

    # LoRAT
    def Pack(self, builder):
        if self.file is not None:
            file = builder.CreateString(self.file)
        LoRAStart(builder)
        if self.file is not None:
            LoRAAddFile(builder, file)
        LoRAAddWeight(builder, self.weight)
        loRa = LoRAEnd(builder)
        return loRa
