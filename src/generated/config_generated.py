# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class SamplerType(object):
    DPMPP2MKarras = 0
    EulerA = 1
    DDIM = 2
    PLMS = 3
    DPMPPSDEKarras = 4
    UniPC = 5
    LCM = 6
    EulerASubstep = 7
    DPMPPSDESubstep = 8
    TCD = 9
    EulerATrailing = 10
    DPMPPSDETrailing = 11
    DPMPP2MAYS = 12
    EulerAAYS = 13
    DPMPPSDEAYS = 14
    DPMPP2MTrailing = 15
    DDIMTrailing = 16
    UniPCTrailing = 17
    UniPCAYS = 18


class SeedMode(object):
    Legacy = 0
    TorchCpuCompatible = 1
    ScaleAlike = 2
    NvidiaGpuCompatible = 3


class ControlMode(object):
    Balanced = 0
    Prompt = 1
    Control = 2


class ControlInputType(object):
    Unspecified = 0
    Custom = 1
    Depth = 2
    Canny = 3
    Scribble = 4
    Pose = 5
    Normalbae = 6
    Color = 7
    Lineart = 8
    Softedge = 9
    Seg = 10
    Inpaint = 11
    Ip2p = 12
    Shuffle = 13
    Mlsd = 14
    Tile = 15
    Blur = 16
    Lowquality = 17
    Gray = 18


class LoRAMode(object):
    All = 0
    Base = 1
    Refiner = 2


class Control(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Control()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsControl(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Control
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Control
    def File(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Control
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # Control
    def GuidanceStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Control
    def GuidanceEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # Control
    def NoPrompt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Control
    def GlobalAveragePooling(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # Control
    def DownSamplingRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # Control
    def ControlMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Control
    def TargetBlocks(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Control
    def TargetBlocksLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Control
    def TargetBlocksIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Control
    def InputOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ControlStart(builder: flatbuffers.Builder):
    builder.StartObject(10)

def ControlAddFile(builder: flatbuffers.Builder, file: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(file), 0)

def ControlAddWeight(builder: flatbuffers.Builder, weight: float):
    builder.PrependFloat32Slot(1, weight, 1.0)

def ControlAddGuidanceStart(builder: flatbuffers.Builder, guidanceStart: float):
    builder.PrependFloat32Slot(2, guidanceStart, 0.0)

def ControlAddGuidanceEnd(builder: flatbuffers.Builder, guidanceEnd: float):
    builder.PrependFloat32Slot(3, guidanceEnd, 1.0)

def ControlAddNoPrompt(builder: flatbuffers.Builder, noPrompt: bool):
    builder.PrependBoolSlot(4, noPrompt, 0)

def ControlAddGlobalAveragePooling(builder: flatbuffers.Builder, globalAveragePooling: bool):
    builder.PrependBoolSlot(5, globalAveragePooling, 1)

def ControlAddDownSamplingRate(builder: flatbuffers.Builder, downSamplingRate: float):
    builder.PrependFloat32Slot(6, downSamplingRate, 1.0)

def ControlAddControlMode(builder: flatbuffers.Builder, controlMode: int):
    builder.PrependInt8Slot(7, controlMode, 0)

def ControlAddTargetBlocks(builder: flatbuffers.Builder, targetBlocks: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(targetBlocks), 0)

def ControlStartTargetBlocksVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def ControlAddInputOverride(builder: flatbuffers.Builder, inputOverride: int):
    builder.PrependInt8Slot(9, inputOverride, 0)

def ControlEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class ControlT(object):

    # ControlT
    def __init__(
        self,
        file = None,
        weight = 1.0,
        guidanceStart = 0.0,
        guidanceEnd = 1.0,
        noPrompt = False,
        globalAveragePooling = True,
        downSamplingRate = 1.0,
        controlMode = 0,
        targetBlocks = None,
        inputOverride = 0,
    ):
        self.file = file  # type: Optional[str]
        self.weight = weight  # type: float
        self.guidanceStart = guidanceStart  # type: float
        self.guidanceEnd = guidanceEnd  # type: float
        self.noPrompt = noPrompt  # type: bool
        self.globalAveragePooling = globalAveragePooling  # type: bool
        self.downSamplingRate = downSamplingRate  # type: float
        self.controlMode = controlMode  # type: int
        self.targetBlocks = targetBlocks  # type: Optional[List[Optional[str]]]
        self.inputOverride = inputOverride  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        control = Control()
        control.Init(buf, pos)
        return cls.InitFromObj(control)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, control):
        x = ControlT()
        x._UnPack(control)
        return x

    # ControlT
    def _UnPack(self, control):
        if control is None:
            return
        self.file = control.File()
        self.weight = control.Weight()
        self.guidanceStart = control.GuidanceStart()
        self.guidanceEnd = control.GuidanceEnd()
        self.noPrompt = control.NoPrompt()
        self.globalAveragePooling = control.GlobalAveragePooling()
        self.downSamplingRate = control.DownSamplingRate()
        self.controlMode = control.ControlMode()
        if not control.TargetBlocksIsNone():
            self.targetBlocks = []
            for i in range(control.TargetBlocksLength()):
                self.targetBlocks.append(control.TargetBlocks(i))
        self.inputOverride = control.InputOverride()

    # ControlT
    def Pack(self, builder):
        if self.file is not None:
            file = builder.CreateString(self.file)
        if self.targetBlocks is not None:
            targetBlockslist = []
            for i in range(len(self.targetBlocks)):
                targetBlockslist.append(builder.CreateString(self.targetBlocks[i]))
            ControlStartTargetBlocksVector(builder, len(self.targetBlocks))
            for i in reversed(range(len(self.targetBlocks))):
                builder.PrependUOffsetTRelative(targetBlockslist[i])
            targetBlocks = builder.EndVector()
        ControlStart(builder)
        if self.file is not None:
            ControlAddFile(builder, file)
        ControlAddWeight(builder, self.weight)
        ControlAddGuidanceStart(builder, self.guidanceStart)
        ControlAddGuidanceEnd(builder, self.guidanceEnd)
        ControlAddNoPrompt(builder, self.noPrompt)
        ControlAddGlobalAveragePooling(builder, self.globalAveragePooling)
        ControlAddDownSamplingRate(builder, self.downSamplingRate)
        ControlAddControlMode(builder, self.controlMode)
        if self.targetBlocks is not None:
            ControlAddTargetBlocks(builder, targetBlocks)
        ControlAddInputOverride(builder, self.inputOverride)
        control = ControlEnd(builder)
        return control


class LoRA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LoRA()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLoRA(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LoRA
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LoRA
    def File(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LoRA
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.6

    # LoRA
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def LoRAStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def LoRAAddFile(builder: flatbuffers.Builder, file: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(file), 0)

def LoRAAddWeight(builder: flatbuffers.Builder, weight: float):
    builder.PrependFloat32Slot(1, weight, 0.6)

def LoRAAddMode(builder: flatbuffers.Builder, mode: int):
    builder.PrependInt8Slot(2, mode, 0)

def LoRAEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



class LoRAT(object):

    # LoRAT
    def __init__(
        self,
        file = None,
        weight = 0.6,
        mode = 0,
    ):
        self.file = file  # type: Optional[str]
        self.weight = weight  # type: float
        self.mode = mode  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        loRa = LoRA()
        loRa.Init(buf, pos)
        return cls.InitFromObj(loRa)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, loRa):
        x = LoRAT()
        x._UnPack(loRa)
        return x

    # LoRAT
    def _UnPack(self, loRa):
        if loRa is None:
            return
        self.file = loRa.File()
        self.weight = loRa.Weight()
        self.mode = loRa.Mode()

    # LoRAT
    def Pack(self, builder):
        if self.file is not None:
            file = builder.CreateString(self.file)
        LoRAStart(builder)
        if self.file is not None:
            LoRAAddFile(builder, file)
        LoRAAddWeight(builder, self.weight)
        LoRAAddMode(builder, self.mode)
        loRa = LoRAEnd(builder)
        return loRa


class GenerationConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GenerationConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGenerationConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GenerationConfiguration
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GenerationConfiguration
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def StartWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def StartHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def Seed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def Steps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def GuidanceScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GenerationConfiguration
    def Strength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GenerationConfiguration
    def Model(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def Sampler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def BatchCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # GenerationConfiguration
    def BatchSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # GenerationConfiguration
    def HiresFix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def HiresFixStartWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def HiresFixStartHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def HiresFixStrength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.7

    # GenerationConfiguration
    def Upscaler(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def ImageGuidanceScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.5

    # GenerationConfiguration
    def SeedMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def ClipSkip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # GenerationConfiguration
    def Controls(self, j: int) -> Optional[Control]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Control()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GenerationConfiguration
    def ControlsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GenerationConfiguration
    def ControlsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # GenerationConfiguration
    def Loras(self, j: int) -> Optional[LoRA]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = LoRA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GenerationConfiguration
    def LorasLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GenerationConfiguration
    def LorasIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # GenerationConfiguration
    def MaskBlur(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GenerationConfiguration
    def FaceRestoration(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def ClipWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # GenerationConfiguration
    def NegativePromptForImagePrior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # GenerationConfiguration
    def ImagePriorSteps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5

    # GenerationConfiguration
    def RefinerModel(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def OriginalImageHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def OriginalImageWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def CropTop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def CropLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def TargetImageHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def TargetImageWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def AestheticScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 6.0

    # GenerationConfiguration
    def NegativeAestheticScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 2.5

    # GenerationConfiguration
    def ZeroNegativePrompt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def RefinerStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.7

    # GenerationConfiguration
    def NegativeOriginalImageHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def NegativeOriginalImageWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def Name(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def FpsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 5

    # GenerationConfiguration
    def MotionBucketId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 127

    # GenerationConfiguration
    def CondAug(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.02

    # GenerationConfiguration
    def StartFrameCfg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # GenerationConfiguration
    def NumFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 14

    # GenerationConfiguration
    def MaskBlurOutset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def Sharpness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GenerationConfiguration
    def Shift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # GenerationConfiguration
    def Stage2Steps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10

    # GenerationConfiguration
    def Stage2Cfg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # GenerationConfiguration
    def Stage2Shift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # GenerationConfiguration
    def TiledDecoding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def DecodingTileWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 10

    # GenerationConfiguration
    def DecodingTileHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 10

    # GenerationConfiguration
    def DecodingTileOverlap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 2

    # GenerationConfiguration
    def StochasticSamplingGamma(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.3

    # GenerationConfiguration
    def PreserveOriginalAfterInpaint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # GenerationConfiguration
    def TiledDiffusion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def DiffusionTileWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 16

    # GenerationConfiguration
    def DiffusionTileHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 16

    # GenerationConfiguration
    def DiffusionTileOverlap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 2

    # GenerationConfiguration
    def UpscalerScaleFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def T5TextEncoder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # GenerationConfiguration
    def SeparateClipL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def ClipLText(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def SeparateOpenClipG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def OpenClipGText(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def SpeedUpWithGuidanceEmbed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # GenerationConfiguration
    def GuidanceEmbed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 3.5

    # GenerationConfiguration
    def ResolutionDependentShift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # GenerationConfiguration
    def TeaCacheStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 5

    # GenerationConfiguration
    def TeaCacheEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # GenerationConfiguration
    def TeaCacheThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.06

    # GenerationConfiguration
    def TeaCache(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def SeparateT5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def T5Text(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GenerationConfiguration
    def TeaCacheMaxSkipSteps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 3

    # GenerationConfiguration
    def CausalInferenceEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def CausalInference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 3

    # GenerationConfiguration
    def CausalInferencePad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GenerationConfiguration
    def CfgZeroStar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GenerationConfiguration
    def CfgZeroInitSteps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def GenerationConfigurationStart(builder: flatbuffers.Builder):
    builder.StartObject(84)

def GenerationConfigurationAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependInt64Slot(0, id, 0)

def GenerationConfigurationAddStartWidth(builder: flatbuffers.Builder, startWidth: int):
    builder.PrependUint16Slot(1, startWidth, 0)

def GenerationConfigurationAddStartHeight(builder: flatbuffers.Builder, startHeight: int):
    builder.PrependUint16Slot(2, startHeight, 0)

def GenerationConfigurationAddSeed(builder: flatbuffers.Builder, seed: int):
    builder.PrependUint32Slot(3, seed, 0)

def GenerationConfigurationAddSteps(builder: flatbuffers.Builder, steps: int):
    builder.PrependUint32Slot(4, steps, 0)

def GenerationConfigurationAddGuidanceScale(builder: flatbuffers.Builder, guidanceScale: float):
    builder.PrependFloat32Slot(5, guidanceScale, 0.0)

def GenerationConfigurationAddStrength(builder: flatbuffers.Builder, strength: float):
    builder.PrependFloat32Slot(6, strength, 0.0)

def GenerationConfigurationAddModel(builder: flatbuffers.Builder, model: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(model), 0)

def GenerationConfigurationAddSampler(builder: flatbuffers.Builder, sampler: int):
    builder.PrependInt8Slot(8, sampler, 0)

def GenerationConfigurationAddBatchCount(builder: flatbuffers.Builder, batchCount: int):
    builder.PrependUint32Slot(9, batchCount, 1)

def GenerationConfigurationAddBatchSize(builder: flatbuffers.Builder, batchSize: int):
    builder.PrependUint32Slot(10, batchSize, 1)

def GenerationConfigurationAddHiresFix(builder: flatbuffers.Builder, hiresFix: bool):
    builder.PrependBoolSlot(11, hiresFix, 0)

def GenerationConfigurationAddHiresFixStartWidth(builder: flatbuffers.Builder, hiresFixStartWidth: int):
    builder.PrependUint16Slot(12, hiresFixStartWidth, 0)

def GenerationConfigurationAddHiresFixStartHeight(builder: flatbuffers.Builder, hiresFixStartHeight: int):
    builder.PrependUint16Slot(13, hiresFixStartHeight, 0)

def GenerationConfigurationAddHiresFixStrength(builder: flatbuffers.Builder, hiresFixStrength: float):
    builder.PrependFloat32Slot(14, hiresFixStrength, 0.7)

def GenerationConfigurationAddUpscaler(builder: flatbuffers.Builder, upscaler: int):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(upscaler), 0)

def GenerationConfigurationAddImageGuidanceScale(builder: flatbuffers.Builder, imageGuidanceScale: float):
    builder.PrependFloat32Slot(16, imageGuidanceScale, 1.5)

def GenerationConfigurationAddSeedMode(builder: flatbuffers.Builder, seedMode: int):
    builder.PrependInt8Slot(17, seedMode, 0)

def GenerationConfigurationAddClipSkip(builder: flatbuffers.Builder, clipSkip: int):
    builder.PrependUint32Slot(18, clipSkip, 1)

def GenerationConfigurationAddControls(builder: flatbuffers.Builder, controls: int):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(controls), 0)

def GenerationConfigurationStartControlsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def GenerationConfigurationAddLoras(builder: flatbuffers.Builder, loras: int):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(loras), 0)

def GenerationConfigurationStartLorasVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def GenerationConfigurationAddMaskBlur(builder: flatbuffers.Builder, maskBlur: float):
    builder.PrependFloat32Slot(21, maskBlur, 0.0)

def GenerationConfigurationAddFaceRestoration(builder: flatbuffers.Builder, faceRestoration: int):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(faceRestoration), 0)

def GenerationConfigurationAddClipWeight(builder: flatbuffers.Builder, clipWeight: float):
    builder.PrependFloat32Slot(25, clipWeight, 1.0)

def GenerationConfigurationAddNegativePromptForImagePrior(builder: flatbuffers.Builder, negativePromptForImagePrior: bool):
    builder.PrependBoolSlot(26, negativePromptForImagePrior, 1)

def GenerationConfigurationAddImagePriorSteps(builder: flatbuffers.Builder, imagePriorSteps: int):
    builder.PrependUint32Slot(27, imagePriorSteps, 5)

def GenerationConfigurationAddRefinerModel(builder: flatbuffers.Builder, refinerModel: int):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(refinerModel), 0)

def GenerationConfigurationAddOriginalImageHeight(builder: flatbuffers.Builder, originalImageHeight: int):
    builder.PrependUint32Slot(29, originalImageHeight, 0)

def GenerationConfigurationAddOriginalImageWidth(builder: flatbuffers.Builder, originalImageWidth: int):
    builder.PrependUint32Slot(30, originalImageWidth, 0)

def GenerationConfigurationAddCropTop(builder: flatbuffers.Builder, cropTop: int):
    builder.PrependInt32Slot(31, cropTop, 0)

def GenerationConfigurationAddCropLeft(builder: flatbuffers.Builder, cropLeft: int):
    builder.PrependInt32Slot(32, cropLeft, 0)

def GenerationConfigurationAddTargetImageHeight(builder: flatbuffers.Builder, targetImageHeight: int):
    builder.PrependUint32Slot(33, targetImageHeight, 0)

def GenerationConfigurationAddTargetImageWidth(builder: flatbuffers.Builder, targetImageWidth: int):
    builder.PrependUint32Slot(34, targetImageWidth, 0)

def GenerationConfigurationAddAestheticScore(builder: flatbuffers.Builder, aestheticScore: float):
    builder.PrependFloat32Slot(35, aestheticScore, 6.0)

def GenerationConfigurationAddNegativeAestheticScore(builder: flatbuffers.Builder, negativeAestheticScore: float):
    builder.PrependFloat32Slot(36, negativeAestheticScore, 2.5)

def GenerationConfigurationAddZeroNegativePrompt(builder: flatbuffers.Builder, zeroNegativePrompt: bool):
    builder.PrependBoolSlot(37, zeroNegativePrompt, 0)

def GenerationConfigurationAddRefinerStart(builder: flatbuffers.Builder, refinerStart: float):
    builder.PrependFloat32Slot(38, refinerStart, 0.7)

def GenerationConfigurationAddNegativeOriginalImageHeight(builder: flatbuffers.Builder, negativeOriginalImageHeight: int):
    builder.PrependUint32Slot(39, negativeOriginalImageHeight, 0)

def GenerationConfigurationAddNegativeOriginalImageWidth(builder: flatbuffers.Builder, negativeOriginalImageWidth: int):
    builder.PrependUint32Slot(40, negativeOriginalImageWidth, 0)

def GenerationConfigurationAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def GenerationConfigurationAddFpsId(builder: flatbuffers.Builder, fpsId: int):
    builder.PrependUint32Slot(42, fpsId, 5)

def GenerationConfigurationAddMotionBucketId(builder: flatbuffers.Builder, motionBucketId: int):
    builder.PrependUint32Slot(43, motionBucketId, 127)

def GenerationConfigurationAddCondAug(builder: flatbuffers.Builder, condAug: float):
    builder.PrependFloat32Slot(44, condAug, 0.02)

def GenerationConfigurationAddStartFrameCfg(builder: flatbuffers.Builder, startFrameCfg: float):
    builder.PrependFloat32Slot(45, startFrameCfg, 1.0)

def GenerationConfigurationAddNumFrames(builder: flatbuffers.Builder, numFrames: int):
    builder.PrependUint32Slot(46, numFrames, 14)

def GenerationConfigurationAddMaskBlurOutset(builder: flatbuffers.Builder, maskBlurOutset: int):
    builder.PrependInt32Slot(47, maskBlurOutset, 0)

def GenerationConfigurationAddSharpness(builder: flatbuffers.Builder, sharpness: float):
    builder.PrependFloat32Slot(48, sharpness, 0.0)

def GenerationConfigurationAddShift(builder: flatbuffers.Builder, shift: float):
    builder.PrependFloat32Slot(49, shift, 1.0)

def GenerationConfigurationAddStage2Steps(builder: flatbuffers.Builder, stage2Steps: int):
    builder.PrependUint32Slot(50, stage2Steps, 10)

def GenerationConfigurationAddStage2Cfg(builder: flatbuffers.Builder, stage2Cfg: float):
    builder.PrependFloat32Slot(51, stage2Cfg, 1.0)

def GenerationConfigurationAddStage2Shift(builder: flatbuffers.Builder, stage2Shift: float):
    builder.PrependFloat32Slot(52, stage2Shift, 1.0)

def GenerationConfigurationAddTiledDecoding(builder: flatbuffers.Builder, tiledDecoding: bool):
    builder.PrependBoolSlot(53, tiledDecoding, 0)

def GenerationConfigurationAddDecodingTileWidth(builder: flatbuffers.Builder, decodingTileWidth: int):
    builder.PrependUint16Slot(54, decodingTileWidth, 10)

def GenerationConfigurationAddDecodingTileHeight(builder: flatbuffers.Builder, decodingTileHeight: int):
    builder.PrependUint16Slot(55, decodingTileHeight, 10)

def GenerationConfigurationAddDecodingTileOverlap(builder: flatbuffers.Builder, decodingTileOverlap: int):
    builder.PrependUint16Slot(56, decodingTileOverlap, 2)

def GenerationConfigurationAddStochasticSamplingGamma(builder: flatbuffers.Builder, stochasticSamplingGamma: float):
    builder.PrependFloat32Slot(57, stochasticSamplingGamma, 0.3)

def GenerationConfigurationAddPreserveOriginalAfterInpaint(builder: flatbuffers.Builder, preserveOriginalAfterInpaint: bool):
    builder.PrependBoolSlot(58, preserveOriginalAfterInpaint, 1)

def GenerationConfigurationAddTiledDiffusion(builder: flatbuffers.Builder, tiledDiffusion: bool):
    builder.PrependBoolSlot(59, tiledDiffusion, 0)

def GenerationConfigurationAddDiffusionTileWidth(builder: flatbuffers.Builder, diffusionTileWidth: int):
    builder.PrependUint16Slot(60, diffusionTileWidth, 16)

def GenerationConfigurationAddDiffusionTileHeight(builder: flatbuffers.Builder, diffusionTileHeight: int):
    builder.PrependUint16Slot(61, diffusionTileHeight, 16)

def GenerationConfigurationAddDiffusionTileOverlap(builder: flatbuffers.Builder, diffusionTileOverlap: int):
    builder.PrependUint16Slot(62, diffusionTileOverlap, 2)

def GenerationConfigurationAddUpscalerScaleFactor(builder: flatbuffers.Builder, upscalerScaleFactor: int):
    builder.PrependUint8Slot(63, upscalerScaleFactor, 0)

def GenerationConfigurationAddT5TextEncoder(builder: flatbuffers.Builder, t5TextEncoder: bool):
    builder.PrependBoolSlot(64, t5TextEncoder, 1)

def GenerationConfigurationAddSeparateClipL(builder: flatbuffers.Builder, separateClipL: bool):
    builder.PrependBoolSlot(65, separateClipL, 0)

def GenerationConfigurationAddClipLText(builder: flatbuffers.Builder, clipLText: int):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(clipLText), 0)

def GenerationConfigurationAddSeparateOpenClipG(builder: flatbuffers.Builder, separateOpenClipG: bool):
    builder.PrependBoolSlot(67, separateOpenClipG, 0)

def GenerationConfigurationAddOpenClipGText(builder: flatbuffers.Builder, openClipGText: int):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(openClipGText), 0)

def GenerationConfigurationAddSpeedUpWithGuidanceEmbed(builder: flatbuffers.Builder, speedUpWithGuidanceEmbed: bool):
    builder.PrependBoolSlot(69, speedUpWithGuidanceEmbed, 1)

def GenerationConfigurationAddGuidanceEmbed(builder: flatbuffers.Builder, guidanceEmbed: float):
    builder.PrependFloat32Slot(70, guidanceEmbed, 3.5)

def GenerationConfigurationAddResolutionDependentShift(builder: flatbuffers.Builder, resolutionDependentShift: bool):
    builder.PrependBoolSlot(71, resolutionDependentShift, 1)

def GenerationConfigurationAddTeaCacheStart(builder: flatbuffers.Builder, teaCacheStart: int):
    builder.PrependInt32Slot(72, teaCacheStart, 5)

def GenerationConfigurationAddTeaCacheEnd(builder: flatbuffers.Builder, teaCacheEnd: int):
    builder.PrependInt32Slot(73, teaCacheEnd, -1)

def GenerationConfigurationAddTeaCacheThreshold(builder: flatbuffers.Builder, teaCacheThreshold: float):
    builder.PrependFloat32Slot(74, teaCacheThreshold, 0.06)

def GenerationConfigurationAddTeaCache(builder: flatbuffers.Builder, teaCache: bool):
    builder.PrependBoolSlot(75, teaCache, 0)

def GenerationConfigurationAddSeparateT5(builder: flatbuffers.Builder, separateT5: bool):
    builder.PrependBoolSlot(76, separateT5, 0)

def GenerationConfigurationAddT5Text(builder: flatbuffers.Builder, t5Text: int):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(t5Text), 0)

def GenerationConfigurationAddTeaCacheMaxSkipSteps(builder: flatbuffers.Builder, teaCacheMaxSkipSteps: int):
    builder.PrependInt32Slot(78, teaCacheMaxSkipSteps, 3)

def GenerationConfigurationAddCausalInferenceEnabled(builder: flatbuffers.Builder, causalInferenceEnabled: bool):
    builder.PrependBoolSlot(79, causalInferenceEnabled, 0)

def GenerationConfigurationAddCausalInference(builder: flatbuffers.Builder, causalInference: int):
    builder.PrependInt32Slot(80, causalInference, 3)

def GenerationConfigurationAddCausalInferencePad(builder: flatbuffers.Builder, causalInferencePad: int):
    builder.PrependInt32Slot(81, causalInferencePad, 0)

def GenerationConfigurationAddCfgZeroStar(builder: flatbuffers.Builder, cfgZeroStar: bool):
    builder.PrependBoolSlot(82, cfgZeroStar, 0)

def GenerationConfigurationAddCfgZeroInitSteps(builder: flatbuffers.Builder, cfgZeroInitSteps: int):
    builder.PrependInt32Slot(83, cfgZeroInitSteps, 0)

def GenerationConfigurationEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class GenerationConfigurationT(object):

    # GenerationConfigurationT
    def __init__(
        self,
        id = 0,
        startWidth = 0,
        startHeight = 0,
        seed = 0,
        steps = 0,
        guidanceScale = 0.0,
        strength = 0.0,
        model = None,
        sampler = 0,
        batchCount = 1,
        batchSize = 1,
        hiresFix = False,
        hiresFixStartWidth = 0,
        hiresFixStartHeight = 0,
        hiresFixStrength = 0.7,
        upscaler = None,
        imageGuidanceScale = 1.5,
        seedMode = 0,
        clipSkip = 1,
        controls = None,
        loras = None,
        maskBlur = 0.0,
        faceRestoration = None,
        clipWeight = 1.0,
        negativePromptForImagePrior = True,
        imagePriorSteps = 5,
        refinerModel = None,
        originalImageHeight = 0,
        originalImageWidth = 0,
        cropTop = 0,
        cropLeft = 0,
        targetImageHeight = 0,
        targetImageWidth = 0,
        aestheticScore = 6.0,
        negativeAestheticScore = 2.5,
        zeroNegativePrompt = False,
        refinerStart = 0.7,
        negativeOriginalImageHeight = 0,
        negativeOriginalImageWidth = 0,
        name = None,
        fpsId = 5,
        motionBucketId = 127,
        condAug = 0.02,
        startFrameCfg = 1.0,
        numFrames = 14,
        maskBlurOutset = 0,
        sharpness = 0.0,
        shift = 1.0,
        stage2Steps = 10,
        stage2Cfg = 1.0,
        stage2Shift = 1.0,
        tiledDecoding = False,
        decodingTileWidth = 10,
        decodingTileHeight = 10,
        decodingTileOverlap = 2,
        stochasticSamplingGamma = 0.3,
        preserveOriginalAfterInpaint = True,
        tiledDiffusion = False,
        diffusionTileWidth = 16,
        diffusionTileHeight = 16,
        diffusionTileOverlap = 2,
        upscalerScaleFactor = 0,
        t5TextEncoder = True,
        separateClipL = False,
        clipLText = None,
        separateOpenClipG = False,
        openClipGText = None,
        speedUpWithGuidanceEmbed = True,
        guidanceEmbed = 3.5,
        resolutionDependentShift = True,
        teaCacheStart = 5,
        teaCacheEnd = -1,
        teaCacheThreshold = 0.06,
        teaCache = False,
        separateT5 = False,
        t5Text = None,
        teaCacheMaxSkipSteps = 3,
        causalInferenceEnabled = False,
        causalInference = 3,
        causalInferencePad = 0,
        cfgZeroStar = False,
        cfgZeroInitSteps = 0,
    ):
        self.id = id  # type: int
        self.startWidth = startWidth  # type: int
        self.startHeight = startHeight  # type: int
        self.seed = seed  # type: int
        self.steps = steps  # type: int
        self.guidanceScale = guidanceScale  # type: float
        self.strength = strength  # type: float
        self.model = model  # type: Optional[str]
        self.sampler = sampler  # type: int
        self.batchCount = batchCount  # type: int
        self.batchSize = batchSize  # type: int
        self.hiresFix = hiresFix  # type: bool
        self.hiresFixStartWidth = hiresFixStartWidth  # type: int
        self.hiresFixStartHeight = hiresFixStartHeight  # type: int
        self.hiresFixStrength = hiresFixStrength  # type: float
        self.upscaler = upscaler  # type: Optional[str]
        self.imageGuidanceScale = imageGuidanceScale  # type: float
        self.seedMode = seedMode  # type: int
        self.clipSkip = clipSkip  # type: int
        self.controls = controls  # type: Optional[List[ControlT]]
        self.loras = loras  # type: Optional[List[LoRAT]]
        self.maskBlur = maskBlur  # type: float
        self.faceRestoration = faceRestoration  # type: Optional[str]
        self.clipWeight = clipWeight  # type: float
        self.negativePromptForImagePrior = negativePromptForImagePrior  # type: bool
        self.imagePriorSteps = imagePriorSteps  # type: int
        self.refinerModel = refinerModel  # type: Optional[str]
        self.originalImageHeight = originalImageHeight  # type: int
        self.originalImageWidth = originalImageWidth  # type: int
        self.cropTop = cropTop  # type: int
        self.cropLeft = cropLeft  # type: int
        self.targetImageHeight = targetImageHeight  # type: int
        self.targetImageWidth = targetImageWidth  # type: int
        self.aestheticScore = aestheticScore  # type: float
        self.negativeAestheticScore = negativeAestheticScore  # type: float
        self.zeroNegativePrompt = zeroNegativePrompt  # type: bool
        self.refinerStart = refinerStart  # type: float
        self.negativeOriginalImageHeight = negativeOriginalImageHeight  # type: int
        self.negativeOriginalImageWidth = negativeOriginalImageWidth  # type: int
        self.name = name  # type: Optional[str]
        self.fpsId = fpsId  # type: int
        self.motionBucketId = motionBucketId  # type: int
        self.condAug = condAug  # type: float
        self.startFrameCfg = startFrameCfg  # type: float
        self.numFrames = numFrames  # type: int
        self.maskBlurOutset = maskBlurOutset  # type: int
        self.sharpness = sharpness  # type: float
        self.shift = shift  # type: float
        self.stage2Steps = stage2Steps  # type: int
        self.stage2Cfg = stage2Cfg  # type: float
        self.stage2Shift = stage2Shift  # type: float
        self.tiledDecoding = tiledDecoding  # type: bool
        self.decodingTileWidth = decodingTileWidth  # type: int
        self.decodingTileHeight = decodingTileHeight  # type: int
        self.decodingTileOverlap = decodingTileOverlap  # type: int
        self.stochasticSamplingGamma = stochasticSamplingGamma  # type: float
        self.preserveOriginalAfterInpaint = preserveOriginalAfterInpaint  # type: bool
        self.tiledDiffusion = tiledDiffusion  # type: bool
        self.diffusionTileWidth = diffusionTileWidth  # type: int
        self.diffusionTileHeight = diffusionTileHeight  # type: int
        self.diffusionTileOverlap = diffusionTileOverlap  # type: int
        self.upscalerScaleFactor = upscalerScaleFactor  # type: int
        self.t5TextEncoder = t5TextEncoder  # type: bool
        self.separateClipL = separateClipL  # type: bool
        self.clipLText = clipLText  # type: Optional[str]
        self.separateOpenClipG = separateOpenClipG  # type: bool
        self.openClipGText = openClipGText  # type: Optional[str]
        self.speedUpWithGuidanceEmbed = speedUpWithGuidanceEmbed  # type: bool
        self.guidanceEmbed = guidanceEmbed  # type: float
        self.resolutionDependentShift = resolutionDependentShift  # type: bool
        self.teaCacheStart = teaCacheStart  # type: int
        self.teaCacheEnd = teaCacheEnd  # type: int
        self.teaCacheThreshold = teaCacheThreshold  # type: float
        self.teaCache = teaCache  # type: bool
        self.separateT5 = separateT5  # type: bool
        self.t5Text = t5Text  # type: Optional[str]
        self.teaCacheMaxSkipSteps = teaCacheMaxSkipSteps  # type: int
        self.causalInferenceEnabled = causalInferenceEnabled  # type: bool
        self.causalInference = causalInference  # type: int
        self.causalInferencePad = causalInferencePad  # type: int
        self.cfgZeroStar = cfgZeroStar  # type: bool
        self.cfgZeroInitSteps = cfgZeroInitSteps  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        generationConfiguration = GenerationConfiguration()
        generationConfiguration.Init(buf, pos)
        return cls.InitFromObj(generationConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, generationConfiguration):
        x = GenerationConfigurationT()
        x._UnPack(generationConfiguration)
        return x

    # GenerationConfigurationT
    def _UnPack(self, generationConfiguration):
        if generationConfiguration is None:
            return
        self.id = generationConfiguration.Id()
        self.startWidth = generationConfiguration.StartWidth()
        self.startHeight = generationConfiguration.StartHeight()
        self.seed = generationConfiguration.Seed()
        self.steps = generationConfiguration.Steps()
        self.guidanceScale = generationConfiguration.GuidanceScale()
        self.strength = generationConfiguration.Strength()
        self.model = generationConfiguration.Model()
        self.sampler = generationConfiguration.Sampler()
        self.batchCount = generationConfiguration.BatchCount()
        self.batchSize = generationConfiguration.BatchSize()
        self.hiresFix = generationConfiguration.HiresFix()
        self.hiresFixStartWidth = generationConfiguration.HiresFixStartWidth()
        self.hiresFixStartHeight = generationConfiguration.HiresFixStartHeight()
        self.hiresFixStrength = generationConfiguration.HiresFixStrength()
        self.upscaler = generationConfiguration.Upscaler()
        self.imageGuidanceScale = generationConfiguration.ImageGuidanceScale()
        self.seedMode = generationConfiguration.SeedMode()
        self.clipSkip = generationConfiguration.ClipSkip()
        if not generationConfiguration.ControlsIsNone():
            self.controls = []
            for i in range(generationConfiguration.ControlsLength()):
                if generationConfiguration.Controls(i) is None:
                    self.controls.append(None)
                else:
                    control_ = ControlT.InitFromObj(generationConfiguration.Controls(i))
                    self.controls.append(control_)
        if not generationConfiguration.LorasIsNone():
            self.loras = []
            for i in range(generationConfiguration.LorasLength()):
                if generationConfiguration.Loras(i) is None:
                    self.loras.append(None)
                else:
                    loRA_ = LoRAT.InitFromObj(generationConfiguration.Loras(i))
                    self.loras.append(loRA_)
        self.maskBlur = generationConfiguration.MaskBlur()
        self.faceRestoration = generationConfiguration.FaceRestoration()
        self.clipWeight = generationConfiguration.ClipWeight()
        self.negativePromptForImagePrior = generationConfiguration.NegativePromptForImagePrior()
        self.imagePriorSteps = generationConfiguration.ImagePriorSteps()
        self.refinerModel = generationConfiguration.RefinerModel()
        self.originalImageHeight = generationConfiguration.OriginalImageHeight()
        self.originalImageWidth = generationConfiguration.OriginalImageWidth()
        self.cropTop = generationConfiguration.CropTop()
        self.cropLeft = generationConfiguration.CropLeft()
        self.targetImageHeight = generationConfiguration.TargetImageHeight()
        self.targetImageWidth = generationConfiguration.TargetImageWidth()
        self.aestheticScore = generationConfiguration.AestheticScore()
        self.negativeAestheticScore = generationConfiguration.NegativeAestheticScore()
        self.zeroNegativePrompt = generationConfiguration.ZeroNegativePrompt()
        self.refinerStart = generationConfiguration.RefinerStart()
        self.negativeOriginalImageHeight = generationConfiguration.NegativeOriginalImageHeight()
        self.negativeOriginalImageWidth = generationConfiguration.NegativeOriginalImageWidth()
        self.name = generationConfiguration.Name()
        self.fpsId = generationConfiguration.FpsId()
        self.motionBucketId = generationConfiguration.MotionBucketId()
        self.condAug = generationConfiguration.CondAug()
        self.startFrameCfg = generationConfiguration.StartFrameCfg()
        self.numFrames = generationConfiguration.NumFrames()
        self.maskBlurOutset = generationConfiguration.MaskBlurOutset()
        self.sharpness = generationConfiguration.Sharpness()
        self.shift = generationConfiguration.Shift()
        self.stage2Steps = generationConfiguration.Stage2Steps()
        self.stage2Cfg = generationConfiguration.Stage2Cfg()
        self.stage2Shift = generationConfiguration.Stage2Shift()
        self.tiledDecoding = generationConfiguration.TiledDecoding()
        self.decodingTileWidth = generationConfiguration.DecodingTileWidth()
        self.decodingTileHeight = generationConfiguration.DecodingTileHeight()
        self.decodingTileOverlap = generationConfiguration.DecodingTileOverlap()
        self.stochasticSamplingGamma = generationConfiguration.StochasticSamplingGamma()
        self.preserveOriginalAfterInpaint = generationConfiguration.PreserveOriginalAfterInpaint()
        self.tiledDiffusion = generationConfiguration.TiledDiffusion()
        self.diffusionTileWidth = generationConfiguration.DiffusionTileWidth()
        self.diffusionTileHeight = generationConfiguration.DiffusionTileHeight()
        self.diffusionTileOverlap = generationConfiguration.DiffusionTileOverlap()
        self.upscalerScaleFactor = generationConfiguration.UpscalerScaleFactor()
        self.t5TextEncoder = generationConfiguration.T5TextEncoder()
        self.separateClipL = generationConfiguration.SeparateClipL()
        self.clipLText = generationConfiguration.ClipLText()
        self.separateOpenClipG = generationConfiguration.SeparateOpenClipG()
        self.openClipGText = generationConfiguration.OpenClipGText()
        self.speedUpWithGuidanceEmbed = generationConfiguration.SpeedUpWithGuidanceEmbed()
        self.guidanceEmbed = generationConfiguration.GuidanceEmbed()
        self.resolutionDependentShift = generationConfiguration.ResolutionDependentShift()
        self.teaCacheStart = generationConfiguration.TeaCacheStart()
        self.teaCacheEnd = generationConfiguration.TeaCacheEnd()
        self.teaCacheThreshold = generationConfiguration.TeaCacheThreshold()
        self.teaCache = generationConfiguration.TeaCache()
        self.separateT5 = generationConfiguration.SeparateT5()
        self.t5Text = generationConfiguration.T5Text()
        self.teaCacheMaxSkipSteps = generationConfiguration.TeaCacheMaxSkipSteps()
        self.causalInferenceEnabled = generationConfiguration.CausalInferenceEnabled()
        self.causalInference = generationConfiguration.CausalInference()
        self.causalInferencePad = generationConfiguration.CausalInferencePad()
        self.cfgZeroStar = generationConfiguration.CfgZeroStar()
        self.cfgZeroInitSteps = generationConfiguration.CfgZeroInitSteps()

    # GenerationConfigurationT
    def Pack(self, builder):
        if self.model is not None:
            model = builder.CreateString(self.model)
        if self.upscaler is not None:
            upscaler = builder.CreateString(self.upscaler)
        if self.controls is not None:
            controlslist = []
            for i in range(len(self.controls)):
                controlslist.append(self.controls[i].Pack(builder))
            GenerationConfigurationStartControlsVector(builder, len(self.controls))
            for i in reversed(range(len(self.controls))):
                builder.PrependUOffsetTRelative(controlslist[i])
            controls = builder.EndVector()
        if self.loras is not None:
            loraslist = []
            for i in range(len(self.loras)):
                loraslist.append(self.loras[i].Pack(builder))
            GenerationConfigurationStartLorasVector(builder, len(self.loras))
            for i in reversed(range(len(self.loras))):
                builder.PrependUOffsetTRelative(loraslist[i])
            loras = builder.EndVector()
        if self.faceRestoration is not None:
            faceRestoration = builder.CreateString(self.faceRestoration)
        if self.refinerModel is not None:
            refinerModel = builder.CreateString(self.refinerModel)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.clipLText is not None:
            clipLText = builder.CreateString(self.clipLText)
        if self.openClipGText is not None:
            openClipGText = builder.CreateString(self.openClipGText)
        if self.t5Text is not None:
            t5Text = builder.CreateString(self.t5Text)
        GenerationConfigurationStart(builder)
        GenerationConfigurationAddId(builder, self.id)
        GenerationConfigurationAddStartWidth(builder, self.startWidth)
        GenerationConfigurationAddStartHeight(builder, self.startHeight)
        GenerationConfigurationAddSeed(builder, self.seed)
        GenerationConfigurationAddSteps(builder, self.steps)
        GenerationConfigurationAddGuidanceScale(builder, self.guidanceScale)
        GenerationConfigurationAddStrength(builder, self.strength)
        if self.model is not None:
            GenerationConfigurationAddModel(builder, model)
        GenerationConfigurationAddSampler(builder, self.sampler)
        GenerationConfigurationAddBatchCount(builder, self.batchCount)
        GenerationConfigurationAddBatchSize(builder, self.batchSize)
        GenerationConfigurationAddHiresFix(builder, self.hiresFix)
        GenerationConfigurationAddHiresFixStartWidth(builder, self.hiresFixStartWidth)
        GenerationConfigurationAddHiresFixStartHeight(builder, self.hiresFixStartHeight)
        GenerationConfigurationAddHiresFixStrength(builder, self.hiresFixStrength)
        if self.upscaler is not None:
            GenerationConfigurationAddUpscaler(builder, upscaler)
        GenerationConfigurationAddImageGuidanceScale(builder, self.imageGuidanceScale)
        GenerationConfigurationAddSeedMode(builder, self.seedMode)
        GenerationConfigurationAddClipSkip(builder, self.clipSkip)
        if self.controls is not None:
            GenerationConfigurationAddControls(builder, controls)
        if self.loras is not None:
            GenerationConfigurationAddLoras(builder, loras)
        GenerationConfigurationAddMaskBlur(builder, self.maskBlur)
        if self.faceRestoration is not None:
            GenerationConfigurationAddFaceRestoration(builder, faceRestoration)
        GenerationConfigurationAddClipWeight(builder, self.clipWeight)
        GenerationConfigurationAddNegativePromptForImagePrior(builder, self.negativePromptForImagePrior)
        GenerationConfigurationAddImagePriorSteps(builder, self.imagePriorSteps)
        if self.refinerModel is not None:
            GenerationConfigurationAddRefinerModel(builder, refinerModel)
        GenerationConfigurationAddOriginalImageHeight(builder, self.originalImageHeight)
        GenerationConfigurationAddOriginalImageWidth(builder, self.originalImageWidth)
        GenerationConfigurationAddCropTop(builder, self.cropTop)
        GenerationConfigurationAddCropLeft(builder, self.cropLeft)
        GenerationConfigurationAddTargetImageHeight(builder, self.targetImageHeight)
        GenerationConfigurationAddTargetImageWidth(builder, self.targetImageWidth)
        GenerationConfigurationAddAestheticScore(builder, self.aestheticScore)
        GenerationConfigurationAddNegativeAestheticScore(builder, self.negativeAestheticScore)
        GenerationConfigurationAddZeroNegativePrompt(builder, self.zeroNegativePrompt)
        GenerationConfigurationAddRefinerStart(builder, self.refinerStart)
        GenerationConfigurationAddNegativeOriginalImageHeight(builder, self.negativeOriginalImageHeight)
        GenerationConfigurationAddNegativeOriginalImageWidth(builder, self.negativeOriginalImageWidth)
        if self.name is not None:
            GenerationConfigurationAddName(builder, name)
        GenerationConfigurationAddFpsId(builder, self.fpsId)
        GenerationConfigurationAddMotionBucketId(builder, self.motionBucketId)
        GenerationConfigurationAddCondAug(builder, self.condAug)
        GenerationConfigurationAddStartFrameCfg(builder, self.startFrameCfg)
        GenerationConfigurationAddNumFrames(builder, self.numFrames)
        GenerationConfigurationAddMaskBlurOutset(builder, self.maskBlurOutset)
        GenerationConfigurationAddSharpness(builder, self.sharpness)
        GenerationConfigurationAddShift(builder, self.shift)
        GenerationConfigurationAddStage2Steps(builder, self.stage2Steps)
        GenerationConfigurationAddStage2Cfg(builder, self.stage2Cfg)
        GenerationConfigurationAddStage2Shift(builder, self.stage2Shift)
        GenerationConfigurationAddTiledDecoding(builder, self.tiledDecoding)
        GenerationConfigurationAddDecodingTileWidth(builder, self.decodingTileWidth)
        GenerationConfigurationAddDecodingTileHeight(builder, self.decodingTileHeight)
        GenerationConfigurationAddDecodingTileOverlap(builder, self.decodingTileOverlap)
        GenerationConfigurationAddStochasticSamplingGamma(builder, self.stochasticSamplingGamma)
        GenerationConfigurationAddPreserveOriginalAfterInpaint(builder, self.preserveOriginalAfterInpaint)
        GenerationConfigurationAddTiledDiffusion(builder, self.tiledDiffusion)
        GenerationConfigurationAddDiffusionTileWidth(builder, self.diffusionTileWidth)
        GenerationConfigurationAddDiffusionTileHeight(builder, self.diffusionTileHeight)
        GenerationConfigurationAddDiffusionTileOverlap(builder, self.diffusionTileOverlap)
        GenerationConfigurationAddUpscalerScaleFactor(builder, self.upscalerScaleFactor)
        GenerationConfigurationAddT5TextEncoder(builder, self.t5TextEncoder)
        GenerationConfigurationAddSeparateClipL(builder, self.separateClipL)
        if self.clipLText is not None:
            GenerationConfigurationAddClipLText(builder, clipLText)
        GenerationConfigurationAddSeparateOpenClipG(builder, self.separateOpenClipG)
        if self.openClipGText is not None:
            GenerationConfigurationAddOpenClipGText(builder, openClipGText)
        GenerationConfigurationAddSpeedUpWithGuidanceEmbed(builder, self.speedUpWithGuidanceEmbed)
        GenerationConfigurationAddGuidanceEmbed(builder, self.guidanceEmbed)
        GenerationConfigurationAddResolutionDependentShift(builder, self.resolutionDependentShift)
        GenerationConfigurationAddTeaCacheStart(builder, self.teaCacheStart)
        GenerationConfigurationAddTeaCacheEnd(builder, self.teaCacheEnd)
        GenerationConfigurationAddTeaCacheThreshold(builder, self.teaCacheThreshold)
        GenerationConfigurationAddTeaCache(builder, self.teaCache)
        GenerationConfigurationAddSeparateT5(builder, self.separateT5)
        if self.t5Text is not None:
            GenerationConfigurationAddT5Text(builder, t5Text)
        GenerationConfigurationAddTeaCacheMaxSkipSteps(builder, self.teaCacheMaxSkipSteps)
        GenerationConfigurationAddCausalInferenceEnabled(builder, self.causalInferenceEnabled)
        GenerationConfigurationAddCausalInference(builder, self.causalInference)
        GenerationConfigurationAddCausalInferencePad(builder, self.causalInferencePad)
        GenerationConfigurationAddCfgZeroStar(builder, self.cfgZeroStar)
        GenerationConfigurationAddCfgZeroInitSteps(builder, self.cfgZeroInitSteps)
        generationConfiguration = GenerationConfigurationEnd(builder)
        return generationConfiguration


